#!/bin/bash

source /usr/bitey/software/coffee/pak.conf
VERSION="$PACKAGE_VERSION"
if [[ -d "$HOME/.caffeine" ]]; then
    source "$HOME/.caffeine/pak.conf"
    CAFFEINE_VERSION="$PACKAGE_VERSION"
fi
COFFEE_DIR="$HOME/.coffee"
CONF_FILE="$COFFEE_DIR/config/csh.conf"

if [[ ! -d "$COFFEE_DIR/config" ]]; then
    mkdir -p "$COFFEE_DIR/config"
fi

if [[ "$1" == "set" && -n "$2" && -n "$3" ]]; then
    VAR_NAME="$2"
    VAR_VALUE="$3"

    # Create config file if it doesn't exist
    if [[ ! -f "$CONF_FILE" ]]; then
        touch "$CONF_FILE"
        echo -e "#!/bin/bash\n" > "$CONF_FILE"
    fi

    # Remove existing line with the variable (if it exists)
    sed -i "/^\s*${VAR_NAME}=.*/d" "$CONF_FILE"

    # Append new variable setting
    echo "${VAR_NAME}=\"${VAR_VALUE}\"" >> "$CONF_FILE"
    echo "‚úÖ Set $VAR_NAME to \"$VAR_VALUE\" in $CONF_FILE"
    exit 0
fi

if [[ $# -eq 0 ]]; then
    echo "‚ùî Run \"help\" (in shell) or \"coffee --help\" for usage."
    exit 0
fi

if [[ "$1" == "--help" ]]; then
    echo "üí° Coffee Help"
    echo
    echo "üêö Shell:"
    echo "    exit - Exit the Shell."
    echo "    help - See the help message."
    echo "    version - See the version."
    echo "    restart - Restart the Shell."
    echo "üéà CLI:"
    echo "    coffee set <VAR_NAME> <VALUE> - Set a shell configuration variable."
    echo "    coffee default - Reset your configuration."
    echo "    coffee preset <ID> - Load a preset."
    echo "    coffee preset --copy - Create presets directory and copy default presets."
    echo "    coffee preset --list - See all presets."
    echo "    coffee preset --new <ID> - Create a new preset."
    echo "    coffee preset --del <ID> - Delete a preset."
    echo "    coffee patch --list - List patches."
    echo "    coffee patch --add - Add a patch."
    echo "    coffee patch --new - Create a new patch."
    echo "    coffee patch --del - Delete a patch."
    echo "    coffee --help - See the help message."
    echo "    coffee --version - See the version."
    echo "üíª Other:"
    echo "    csh - Run a Coffee Shell session."
    echo "    chsh -s /usr/bin/csh - Change your shell to Coffee Shell."
    echo
fi

if [[ "$1" == "--version" ]]; then
    echo "‚òï Coffee $VERSION"
    if [[ -d "$HOME/.caffeine" ]]; then
        echo "ü§é Caffeine $CAFFEINE_VERSION"
    fi
    exit 0
fi

if [[ "$1" == "default" ]]; then
    coffee preset cappuccino
    echo
    echo "‚úÖ Configuration reset."
    exit 0
fi

if [[ "$1" == "preset" && "$2" == "--list" ]]; then
    PRESET_PATH="$COFFEE_DIR/presets"
    if [[ ! -d "$PRESET_PATH" ]]; then
        echo "‚ùå No presets found."
        exit 1
    fi

    echo "üé® Available Presets:"
    for d in "$PRESET_PATH"/*; do
        [ -d "$d" ] || continue
        ID="$(basename "$d")"
        INFO="$d/info.txt"

        if [[ -f "$INFO" ]]; then
            # Safely load fields from info.txt
            ICON=""
            NAME=""
            DESCRIPTION=""
            while IFS='=' read -r key value; do
                key="${key//\"/}"
                value="${value//\"/}"
                case "$key" in
                    ICON) ICON="${value}" ;;
                    NAME) NAME="${value}" ;;
                    DESCRIPTION) DESCRIPTION="${value}" ;;
                esac
            done < "$INFO"

            printf "  %s %s (%s) - %s\n" "${ICON:-üìÅ}" "${NAME:-$ID}" "$ID" "${DESCRIPTION:-No description.}"
        else
            printf "  üìÅ %s (%s) - No description.\n" "$ID" "$ID"
        fi
    done
    exit 0
fi


if [[ "$1" == "preset" && "$2" == "--copy" ]]; then
    rm -rf "$COFFEE_DIR/presets"
    mkdir "$COFFEE_DIR/presets"
    cp -r /usr/bitey/software/coffee/presets/* "$COFFEE_DIR/presets"
    exit 0
fi

if [[ "$1" == "preset" ]]; then
    if [[ "$2" == "--new" ]]; then
        NEW_ID="$3"
        if [[ -z "$NEW_ID" ]]; then
            echo "‚ùå Please specify a preset ID. Usage: coffee preset --new <ID>"
            exit 1
        fi
        NEW_PRESET="$COFFEE_DIR/presets/$NEW_ID"
        if [[ -d "$NEW_PRESET" ]]; then
            echo "‚ùå Preset $NEW_ID already exists."
            exit 1
        fi
        mkdir -p "$NEW_PRESET"

        # Create default config file
        cat <<EOF > "$NEW_PRESET/csh.conf"
CSH_PROMPT="command>> "
CSH_ERROR="error>>"
EOF

        # Create default info.txt
        cat <<EOF > "$NEW_PRESET/info.txt"
NAME="My Custom Preset"
ICON="üõ†Ô∏è"
DESCRIPTION="A new custom Coffee Shell preset."
EOF

        echo "‚úÖ Created new preset: $NEW_ID at $NEW_PRESET"
        echo "üìù Now edit csh.conf and info.txt to customize it."
        exit 0
    fi
    if [[ "$2" == "--del" ]]; then
        PRESET="$3"
        
        if [[ -z "$PRESET" ]]; then
            echo "‚ùå Please specify a preset name to delete."
            exit 1
        fi
        
        PRESET_DIR="$COFFEE_DIR/presets/$PRESET"
        
        if [[ "$PRESET" == "cappuccino" ]]; then
            echo "‚ùå Whoa there! Cappucino is the Coffee Shell's main preset and therefore cannot be deleted."
            exit 1
        fi
        if [[ ! -d "$PRESET_DIR" ]]; then
            echo "‚ùå Preset $PRESET cannot be found."
            exit 1
        fi
        rm -rf "$PRESET_DIR"
        echo "‚úÖ Deleted preset $PRESET."
        exit 0
    fi

    PRESET="$2"
    PRESET_DIR="$COFFEE_DIR/presets/$PRESET"
    
    if [[ -z "$PRESET" ]]; then
        echo "‚ùå Please specify a preset."
        exit 1
    fi
    if [[ ! -d "$PRESET_DIR" ]]; then # Prevent accedental config deletion and copying non-existent presets.
        echo "‚ùå Preset $PRESET cannot be found."
        exit 1
    fi
    rm -rf "$COFFEE_DIR/config"
    mkdir "$COFFEE_DIR/config"
    cp -r $PRESET_DIR/* "$COFFEE_DIR/config"
    echo "‚úÖ Loaded preset $PRESET."
    exit 0
fi

PATCH_DIR="$HOME/.coffee/patches"

patch_list() {
  local PATCHDIR="$HOME/.coffee/patches"

  echo "üì¶ Patch List:"
  for patch in "$PATCHDIR"/*; do
    [[ -d "$patch" ]] || continue

    if [[ "$patch" == "disabled" ]]; then
        continue
    fi

    local META="$patch/metadata.txt"
    local NAME CATALOG DESC ICON PATCHFILES

    CATALOG="$(basename "$patch")"
    NAME="$CATALOG"
    DESC="(No description)"
    ICON="üìú"

    if [[ -f "$META" ]]; then
      while IFS='=' read -r key value; do
        # Strip surrounding quotes from value
        value="${value%\"}"
        value="${value#\"}"

        case "$key" in
          Name) NAME="$value" ;;
          Description) DESC="$value" ;;
          Icon) ICON="$value" ;;
        esac
      done < "$META"
    fi

    # Auto-detect all .sh scripts
    PATCHFILES=$(find "$patch" -maxdepth 1 -type f -name "*.sh" | sed -E 's|.*/||; s|\.sh$||' | sort | paste -sd, -)

    echo -e "$ICON $NAME"
    echo -e "    üìÑ Description: $DESC"
    echo -e "    üìÅ Catalog: $CATALOG"
    echo -e "    üìö Patches: $PATCHFILES"
  done
}

patch_add() {
    local src="$1"
    local name="$(basename $src)"
    if [[ "$name" == "" ]]; then
        echo "‚ùå Please specify a patch name."
        return 1
    fi
    
    local dst="$PATCH_DIR/$name"

    if [[ ! -d "$src" ]]; then
        echo "‚ùå Patch source was not found."
        return 1
    fi

    if [[ -d "$dst" ]]; then
        echo "‚ö†Ô∏è Patch '$name' already added."
        return 1
    fi

    cp -r -- "$src" "$dst"
    echo "‚úÖ Patch '$name' added."
}

patch_new() {
    local name="$1"
    if [[ -z "$name" ]]; then
        echo "‚ùå Please specify a patch name."
        return 1
    fi

    local path="$PATCH_DIR/disabled/$name"

    if [[ -d "$path" ]]; then
        echo "‚ö†Ô∏è Patch '$name' already exists."
        return 1
    fi

    mkdir -p "$path"
    cat > "$path/metadata.txt" <<EOF
Name="$name"
Icon="üìú"
Description="Describe this patch here."
EOF
    touch "$path/main.sh"

    echo "‚úÖ New patch '$name' created at $path"
}

patch_del() {
    local name="$1"
    if [[ -z "$name" ]]; then
        echo "‚ùå Please specify a patch name."
        return 1
    fi

    local src="$PATCH_DIR/$name"
    local disabled="$PATCH_DIR/disabled/$name"

    if [[ -d "$src" ]]; then
        rm -rf "$src"
        echo "üóëÔ∏è Deleted from patches: $name"
    fi
    if [[ -d "$disabled" ]]; then
        rm -rf "$disabled"
        echo "üóëÔ∏è Deleted from patches: $name"
    fi
}

if [[ "$1" == "patch" ]]; then
    if [[ "$2" == "--list" ]]; then
        patch_list
    fi
    if [[ "$2" == "--add" ]]; then
        patch_add "$3"
    fi
    if [[ "$2" == "--new" ]]; then
        patch_new "$3"
    fi
    if [[ "$2" == "--del" ]]; then
        patch_del "$3"
    fi
fi
